using namespace Microsoft.Win32

$moduleDir = "$PSScriptRoot\..\Modules"
"$moduleDir\*.psm1" | Get-ChildItem | Import-Module -Force
Initialize-Environment

#-------------------------------------------------------------------------------
Start-ComponentGroup 'Profile: RJ'
#-------------------------------------------------------------------------------

# Configuration Settings:

$devDrive = 'C:\Dev'
$devDrives = @(
    [PSCustomObject]@{Name = '\Personal'; Email = 'rj.hollberg@outlook.com' }
    [PSCustomObject]@{Name = '\Public'; Email = 'rj.hollberg@outlook.com' }
    [PSCustomObject]@{Name = '\R1'; Email = 'rhollberg@r1rcm.com' }
)

$devFont = [PSCustomObject]@{
    Name    = 'FiraCode NF'
    Package = 'firacodenf'
}

$ohMyPosh = [PSCustomObject]@{
    PowerShell = '$Env:POSH_THEMES_PATH\powerlevel10k_rainbow.omp.json'
    GitBash    = '$POSH_THEMES_PATH\marcduiker.omp.json'
}

#-------------------------------------------------------------------------------
Start-Component 'Windows Search'
#-------------------------------------------------------------------------------

# Indexing Options -> Index these locations:
Assert-WindowsSearchLocation -Path $devDrive

#-------------------------------------------------------------------------------
Start-Component 'Fonts'
#-------------------------------------------------------------------------------

Assert-ChocolateyPackage -Name $devFont.Package

#-------------------------------------------------------------------------------
Start-Component 'Windows Terminal'
#-------------------------------------------------------------------------------

Write-Host 'Validating configuration ...'
$config = Get-WindowsTerminalConfig

$changed = `
($config.profiles.defaults | Assert-Property -Name 'font') -bor `
($config.profiles.defaults.font | Assert-PropertyValue -Name 'face' -Value $devFont.Name) -bor `
($config.profiles.defaults.font | Assert-PropertyValue -Name 'size' -Value 11) -bor `
($config.profiles.defaults.font | Assert-PropertyValue -Name 'weight' -Value 'normal') -bor `
($config.profiles.defaults | Assert-PropertyValue -Name 'useAcrylic' -Value $True) -bor `
($config.profiles.defaults | Assert-PropertyValue -Name 'opacity' -Value 80)

if ($changed) {
    Write-Host 'Saving changes...'
    Set-WindowsTerminalConfig $config
}

#-------------------------------------------------------------------------------
Start-Component 'Oh-My-Posh'
#-------------------------------------------------------------------------------

Assert-WinGetPackage -Name 'JanDeDobbeleer.OhMyPosh'
oh-my-posh disable upgrade

#-------------------------------------------------------------------------------
Start-Component '(Windows) PowerShell 5'
#-------------------------------------------------------------------------------

$theme = if ($ohMyPosh.PowerShell) {
    " --config `"$($ohMyPosh.PowerShell)`""
}
else { $null }

Invoke-PowerShell5 -ModuleDir $moduleDir -Arguments $theme -ScriptBlock {
    param ($theme)

    Write-Host 'Installing theme ...'
    Assert-FileContentBlock `
        -Path $Profile.CurrentUserAllHosts  `
        -Find '# Load Oh-My-Posh theme.*?(\s*$|(\r\n){2,}|\n{2,})' `
        -Content @"
# Load Oh-My-Posh theme
oh-my-posh init pwsh$theme | Invoke-Expression
"@
}

#-------------------------------------------------------------------------------
Start-Component 'PowerShell (Core) 7'
#-------------------------------------------------------------------------------

Invoke-PowerShell7 -ModuleDir $moduleDir -Arguments $theme -ScriptBlock {
    param ($theme)

    Write-Host 'Installing theme ...'
    Assert-FileContentBlock `
        -Path $Profile.CurrentUserAllHosts  `
        -Find '# Load Oh-My-Posh theme.*?(\s*$|(\r\n){2,}|\n{2,})' `
        -Content @"
# Load Oh-My-Posh theme
oh-my-posh init pwsh$theme | Invoke-Expression
"@
}

#-------------------------------------------------------------------------------
Start-Component 'Git'
#-------------------------------------------------------------------------------

Write-Host 'Validating configuration ...'
git config --global user.name 'RJ Hollberg'

$devDrives | ForEach-Object {
    $path = "$devDrive$($_.Name)/".Replace('\', '/')
    git config --global includeIf.gitdir:$path.path "$path.gitconfig"
    git config --file "$path.gitconfig" user.email $_.Email
}

#-------------------------------------------------------------------------------
Start-Component 'Git Bash'
#-------------------------------------------------------------------------------

Write-Host 'Validating configuration ...'
$bashProfile = '~/.bash_profile'
$bashrc = '~/.bashrc'

# Add scripting to load .bashrc file
Assert-FileContentBlock `
    -Path $bashProfile `
    -Find '# [gG]enerated by Git for Windows.*?(\s*$|\n{2,}|(\r\n){2,})' `
    -LineEnding "`n" `
    -Content @'
# Generated by Git for Windows
test -f ~/.profile && . ~/.profile
test -f ~/.bashrc && . ~/.bashrc
'@

# Add scripting to automatically load the SSH Agent, if necessary
Assert-FileContentBlock `
    -Path $bashrc `
    -Find '#-{50,}.*?#-{50,}' `
    -LineEnding "`n" `
    -Content @'
#-------------------------------------------------------------------------------
# Load SSH Agent, if necessary

env=~/.ssh/agent.env

agent_load_env () { test -f "$env" && . "$env" >| /dev/null ; }

agent_start () {
    (umask 077; ssh-agent >| "$env")
    . "$env" >| /dev/null ; }

agent_load_env

# agent_run_state: 0=agent running w/ key; 1=agent w/o key; 2=agent not running
agent_run_state=$(ssh-add -l >| /dev/null 2>&1; echo $?)

if [ ! "$SSH_AUTH_SOCK" ] || [ $agent_run_state = 2 ]; then
    agent_start
    ssh-add
elif [ "$SSH_AUTH_SOCK" ] && [ $agent_run_state = 1 ]; then
    ssh-add
fi

unset env
#-------------------------------------------------------------------------------
'@

$theme = if ($ohMyPosh.GitBash) {
    " --config `"$($ohMyPosh.GitBash)`""
}
else { $null }

# Add scripting to load the theme
Assert-FileContentBlock `
    -Path $bashrc `
    -Find '# Load Oh-My-Posh theme.*?(\s*$|\n{2,}|(\r\n){2,})' `
    -LineEnding "`n" `
    -Content @"
# Load Oh-My-Posh theme
eval `"`$(oh-my-posh init bash$theme)`"
"@

#-------------------------------------------------------------------------------
Start-Component 'TortoiseGit'
#-------------------------------------------------------------------------------

# Settings -> General -> Colors 1
$hive = [RegistryHive]::CurrentUser
$key = 'Software\TortoiseGit'
Assert-RegistryValue $hive $key 'DarkTheme'              1 DWord # Dark theme
$key = 'Software\TortoiseGit\TortoiseProc\Graph'
Assert-RegistryValue $hive $key 'RevGraphUseLocalForCur' 0 DWord # Use local branch color for current branch
$key = 'Software\TortoiseGit\Colors'
Remove-RegistryValue $hive $key 'Conflict'      # Default (ABGR)
Remove-RegistryValue $hive $key 'Added'         # Default (ABGR)
Remove-RegistryValue $hive $key 'Deleted'       # Default (ABGR)
Remove-RegistryValue $hive $key 'Merged'        # Default (ABGR)
Remove-RegistryValue $hive $key 'Modified'      # Default (ABGR)
Remove-RegistryValue $hive $key 'Renamed'       # Default (ABGR)
Remove-RegistryValue $hive $key 'NoteNode'      # Default (ABGR)
Remove-RegistryValue $hive $key 'OtherRef'      # Default (ABGR)

# Settings -> General -> Colors 2
Remove-RegistryValue $hive $key 'CurrentBranch' # Default (ABGR)
Remove-RegistryValue $hive $key 'LocalBranch'   # Default (ABGR)
Remove-RegistryValue $hive $key 'RemoteBranch'  # Default (ABGR)
Remove-RegistryValue $hive $key 'Tag'           # Default (ABGR)
Remove-RegistryValue $hive $key 'FilterMatch'   # Default (ABGR)

# Settings -> General -> Colors 3
Remove-RegistryValue $hive $key 'BranchLine1'   # Default (ABGR)
Remove-RegistryValue $hive $key 'BranchLine2'   # Default (ABGR)
Remove-RegistryValue $hive $key 'BranchLine3'   # Default (ABGR)
Remove-RegistryValue $hive $key 'BranchLine4'   # Default (ABGR)
Remove-RegistryValue $hive $key 'BranchLine5'   # Default (ABGR)
Remove-RegistryValue $hive $key 'BranchLine6'   # Default (ABGR)
Remove-RegistryValue $hive $key 'BranchLine7'   # Default (ABGR)
Remove-RegistryValue $hive $key 'BranchLine8'   # Default (ABGR)
$key = 'Software\TortoiseGit\TortoiseProc\Graph'
Assert-RegistryValue $hive $key 'LogLineWidth'           2 DWord # Line
Assert-RegistryValue $hive $key 'LogNodeSize'           10 DWord # Node

# Settings -> Icon Overlays -> Icon Set
$overlayPath = "$Env:CommonProgramFiles\TortoiseOverlays\Icons\Win10"
$key = 'Software\TortoiseOverlays'
Assert-RegistryValue $hive $key 'AddedIcon'       "$overlayPath\AddedIcon.ico"
Assert-RegistryValue $hive $key 'ConflictIcon'    "$overlayPath\ConflictIcon.ico"
Assert-RegistryValue $hive $key 'DeletedIcon'     "$overlayPath\DeletedIcon.ico"
Assert-RegistryValue $hive $key 'IgnoredIcon'     "$overlayPath\IgnoredIcon.ico"
Assert-RegistryValue $hive $key 'LockedIcon'      "$overlayPath\LockedIcon.ico"
Assert-RegistryValue $hive $key 'ModifiedIcon'    "$overlayPath\ModifiedIcon.ico"
Assert-RegistryValue $hive $key 'NormalIcon'      "$overlayPath\NormalIcon.ico"
Assert-RegistryValue $hive $key 'ReadOnlyIcon'    "$overlayPath\ReadOnlyIcon.ico"
Assert-RegistryValue $hive $key 'UnversionedIcon' "$overlayPath\UnversionedIcon.ico"

# Revision Graph
$key = 'Software\TortoiseGit'
Assert-RegistryValue $hive $key 'ShowRevGraphOverview'   1 DWord # Show an overview of the whole graph
